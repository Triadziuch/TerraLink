/*
 * flash_manage.h
 *
 *  Created on: Jun 23, 2025
 *      Author: kurow
 */

#ifndef INC_FLASH_MANAGE_H_
#define INC_FLASH_MANAGE_H_

#include "stm32l4xx_hal.h"
#include "stdio.h"
#include "string.h"

#define FLASH_PAGE_ADDR    0x08080000U
#define FLASH_PAGE_SIZE    2048U
#define FLASH_BANK         FLASH_BANK_2

// Node ID
#define NODE_DATA_ADDR	0x08080000
#define NODE_UID_ADDR	0x08080000
#define NODE_ID_ADDR	(NODE_DATA_ADDR + NODE_UID_SIZE)
#define NODE_COMM_WAKEUP_TIMER_INTERVAL_ADDR		(NODE_ID_ADDR + NODE_ID_SIZE)
#define NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_ADDR	(NODE_COMM_WAKEUP_TIMER_INTERVAL_ADDR + NODE_COMM_WAKEUP_TIMER_INTERVAL_SIZE)
#define NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_ADDR		(NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_ADDR + NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_SIZE)
#define NODE_MEASUREMENT_WAKEUP_TIMER_TIME_AWAKE_ADDR	(NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_ADDR + NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_SIZE)

#define NODE_UID_SIZE	13	// po 12 bajtów na UID oraz 1 bajt flagi
#define NODE_ID_SIZE	2	// po 2 bajt - 1 na ID, 1 na flagę
#define NODE_COMM_WAKEUP_TIMER_INTERVAL_SIZE	3 // 2 bajty na wartość, 1 na flagę
#define NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_SIZE	2 // 1 bajt na wartość i 1 na flagę
#define NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_SIZE		3 // 2 bajty na wartość, 1 na flagę
#define NODE_MEASUREMENT_WAKEUP_TIMER_TIME_AWAKE_SIZE	2 // 1 bajt na wartość i 1 na flagę

#define NODE_CONFIG_SIZE (NODE_UID_SIZE + NODE_ID_SIZE)
#define NODE_SETTINGS_SIZE (NODE_COMM_WAKEUP_TIMER_INTERVAL_SIZE + NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_SIZE + NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_SIZE + NODE_MEASUREMENT_WAKEUP_TIMER_TIME_AWAKE_SIZE)
#define NODE_DATA_SIZE (NODE_CONFIG_SIZE + NODE_SETTINGS_SIZE)
#define NODE_MAX_COUNT 8

#define NODE_COUNT_ADDR (NODE_DATA_ADDR + NODE_DATA_SIZE * NODE_MAX_COUNT) // 1 bajt na wartość
#define NODE_COUNT_FLAG_ADDR (NODE_COUNT_ADDR + 1) // 1 bajt na flagę

#define NODE_SETTINGS_OFFSET NODE_CONFIG_SIZE
#define NODE_COMM_WAKEUP_TIMER_INTERVAL_OFFSET			 NODE_SETTINGS_OFFSET
#define NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_OFFSET 		(NODE_COMM_WAKEUP_TIMER_INTERVAL_OFFSET + NODE_COMM_WAKEUP_TIMER_INTERVAL_SIZE)
#define NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_OFFSET 	(NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_OFFSET + NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_SIZE)
#define NODE_MEASUREMENT_WAKEUP_TIMER_TIME_AWAKE_OFFSET (NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_OFFSET + NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_SIZE)

#define NODE_COUNT_OFFSET 		(NODE_COUNT_ADDR - NODE_DATA_ADDR)
#define NODE_COUNT_FLAG_OFFSET 	(NODE_COUNT_OFFSET + 1)

#define RESERVED_MEMORY_SIZE ((NODE_DATA_SIZE * NODE_MAX_COUNT) + 2 /* flaga */)
#define VALID_FLAG 	0xA5
//TODO: Add HIVE ID handling

typedef struct {
	uint32_t UID_0;
	uint32_t UID_1;
	uint32_t UID_2;
} STM32_UID_t;

uint8_t check_UID_ID_flag(uint8_t n);
uint8_t get_new_id(void);
int8_t find_id(uint8_t id);
int8_t find_uid(const STM32_UID_t *uid);
HAL_StatusTypeDef flash_write(uint32_t address, const uint8_t *data,
		uint16_t length);

uint8_t FLASH_NODE_UID_get(STM32_UID_t *stm32_uid, uint8_t node_id);
uint8_t FLASH_NODE_ID_by_uid_get(STM32_UID_t *stm32_uid);
uint8_t FLASH_NODE_ID_get(uint8_t n);
uint8_t FLASH_NODE_UID_ID_add(STM32_UID_t *stm32_uid, uint8_t assigned_id);
uint8_t FLASH_NODE_ID_update(uint8_t old_id, uint8_t new_id);
uint8_t FLASH_NODE_ID_remove(uint8_t id);
uint8_t FLASH_NODE_count_get(void);

uint16_t FLASH_NODE_COMM_WAKEUP_TIMER_INTERVAL_get(uint8_t node_id);
uint8_t FLASH_NODE_COMM_WAKEUP_TIMER_INTERVAL_set(uint8_t node_id, uint16_t value);
uint8_t FLASH_NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_get(uint8_t node_id);
uint8_t FLASH_NODE_COMM_WAKEUP_TIMER_TIME_AWAKE_set(uint8_t node_id, uint8_t value);

uint16_t FLASH_NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_get(uint8_t node_id);
uint8_t FLASH_NODE_MEASUREMENT_WAKEUP_TIMER_INTERVAL_set(uint8_t node_id, uint16_t value);
uint8_t FLASH_NODE_MEASUREMENT_WAKEUP_TIMER_TIME_AWAKE_get(uint8_t node_id);
uint8_t FLASH_NODE_MEASUREMENT_WAKEUP_TIMER_TIME_AWAKE_set(uint8_t node_id, uint8_t value);

HAL_StatusTypeDef link_config(void);

#endif /* INC_FLASH_MANAGE_H_ */
